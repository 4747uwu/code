name: Deploy Figgy Backend to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USER }}
        password: ${{ secrets.DROPLET_PASSWORD }}
        script: |
          # ‚úÖ INSTALL DOCKER & DOCKER COMPOSE IF NOT PRESENT
          if ! command -v docker &> /dev/null; then
            echo "üîß Installing Docker..."
            apt update
            apt install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
            add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            apt update
            apt install -y docker-ce docker-ce-cli containerd.io
            systemctl start docker
            systemctl enable docker
            echo "‚úÖ Docker installed"
          else
            echo "‚úÖ Docker already present"
          fi
          
          if ! command -v docker-compose &> /dev/null; then
            echo "üîß Installing Docker Compose..."
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            echo "‚úÖ Docker Compose installed"
          else
            echo "‚úÖ Docker Compose already present"
          fi

          # Create and navigate to project directory
          mkdir -p /opt/figgy-backend
          cd /opt/figgy-backend
          
          # Clean up and get fresh code
          rm -rf backend
          git clone https://github.com/${{ github.repository }}.git backend
          cd backend
          
          # ‚úÖ Create simple environment file (no multiline variables)
          cat > .env << 'EOF'
          NODE_ENV=production
          PORT=5000
          secretKey=secretKey
          EMAIL=EMAIL
          MONGODB_CONNECTION_STRING=${{ secrets.MONGODB_CONNECTION_STRING }}
          EOF
          
          # ‚úÖ Stop existing containers
          echo "=== Stopping existing containers ==="
          docker-compose -f docker-compose.prod.yml down 2>/dev/null || echo "No existing containers to stop"
          
          # Build the backend
          echo "=== Building Figgy Backend ==="
          if ! docker-compose -f docker-compose.prod.yml build --no-cache figgy-backend; then
            echo "‚ùå Build failed! Checking logs..."
            docker-compose -f docker-compose.prod.yml logs figgy-backend
            exit 1
          fi
          
          # Start the backend
          echo "=== Starting Figgy Backend ==="
          if ! docker-compose -f docker-compose.prod.yml up -d figgy-backend; then
            echo "‚ùå Container startup failed! Checking logs..."
            docker-compose -f docker-compose.prod.yml logs figgy-backend
            exit 1
          fi
          
          # Wait for container to start
          sleep 20
          
          # Show running containers
          echo "=== Running Containers ==="
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          
          # Check container status
          echo "=== Figgy Backend Status ==="
          docker-compose -f docker-compose.prod.yml ps figgy-backend
          
          # Check logs for any errors
          echo "=== Recent Container Logs ==="
          docker-compose -f docker-compose.prod.yml logs --tail=50 figgy-backend
          
          # Check if port 5000 is listening
          echo "=== Port Status ==="
          apt update && apt install -y net-tools
          netstat -tlnp | grep :5000 || echo "Port 5000 not listening"
          
          # Test the API
          echo "=== API Health Check ==="
          sleep 10
          curl -f http://localhost:5000/api/health || echo "API not responding"
          curl -f http://localhost:5000/ || echo "Root endpoint not responding"
          
          # Clean up old images
          docker image prune -f
          
          echo "‚úÖ Figgy Backend deployment complete!"